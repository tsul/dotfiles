set nocompatible
filetype off

set rtp+=~/.vim/bundle/Vundle.vim
call vundle#begin()

Plugin 'VundleVim/Vundle.vim'                   " Plugin manager
Plugin 'ctrlpvim/ctrlp.vim'                     " File finder
Plugin 'scrooloose/nerdtree'                    " File navigator
Plugin 'tpope/vim-fugitive'                     " Git integration
Plugin 'tpope/vim-sleuth'                       " Tab detection
Plugin 'tpope/vim-commentary'                   " Comment things
Plugin 'tpope/vim-surround'                     " Surround things
Plugin 'sheerun/vim-polyglot'                   " Syntax highlighting for hella
Plugin 'AndrewRadev/splitjoin.vim'              " Split/join one-liners
Plugin 'godlygeek/tabular'                      " Align things
Plugin 'rking/ag.vim'                           " Grep for things
Plugin 'Valloric/YouCompleteMe'                 " Autocompletion
Plugin 'ternjs/tern_for_vim'                    " Javascript code analysis
Plugin 'kern/vim-es7'                           " Up-to-date (ES6+) syntax
Plugin 'scrooloose/syntastic'                   " Linting
Plugin 'mtscout6/syntastic-local-eslint.vim'    " Use local eslint
Plugin 'mkitt/tabline.vim'                      " Tab titles with index

call vundle#end()

filetype on
filetype plugin on
filetype indent on

syntax on
set background=dark
colorscheme water

set autoindent
set backspace=indent,eol,start
set tabstop=2
set shiftwidth=2
set expandtab
set smarttab
set nrformats-=octal
set laststatus=2
set wildmenu
set scrolloff=5
set number
set visualbell
set ignorecase
set smartcase
set incsearch
set hlsearch
set cursorline
set mouse=a
set shortmess+=c
set undofile

let mapleader="\<Space>"

" Move within screen lines
nnoremap j gj
nnoremap k gk

" Shortcuts
nnoremap <Leader>o :CtrlP<CR>
nnoremap <Leader>w :w<CR>
nnoremap <Leader>q :q<CR>
nnoremap <Leader>n :NERDTree<CR>
nnoremap <Leader>f :NERDTreeFind<CR>
nnoremap <Leader>r :source ~/.vimrc<CR>
nnoremap <Leader>e :e ~/.vimrc<CR>
nnoremap <Leader>c :noh<CR>
nnoremap <Leader>t :tabedit<CR>
nnoremap <Leader>sc :SyntasticCheck<CR>
nnoremap <Leader>st :SyntasticToggleMode<CR>
nnoremap <Leader>sr :SyntasticReset<CR>
nnoremap <Leader>g gt<CR>

" Clipboard management
vmap <Leader>y "+y
vmap <Leader>d "+d
nmap <Leader>p "+p
nmap <Leader>P "+P
vmap <Leader>p "+p
vmap <Leader>P "+P

" Split management
nnoremap <Leader>wv :vsplit<CR>
nnoremap <Leader>ws :split<CR>
nnoremap <Leader>we <C-W>=
nnoremap <C-J> <C-W><C-J>
nnoremap <C-K> <C-W><C-K>
nnoremap <C-L> <C-W><C-L>
nnoremap <C-H> <C-W><C-H>

imap jk <Esc>

set splitbelow
set splitright

ca Ag Ag!
ca ag Ag!
let g:ag_highlight=1
let g:ag_qhandler="botright copen 5"

ca tab Tab

nmap <Leader>sk :SplitjoinSplit<CR>
nmap <Leader>sj :SplitjoinJoin<CR>

let g:polyglot_disabled = ['javascript', 'javascript.jsx']

let g:syntastic_always_populate_loc_list = 0
let g:syntastic_auto_loc_list = 1
let g:syntastic_check_on_open = 0
let g:syntastic_check_on_wq = 0
let g:syntastic_javascript_checkers = ['eslint']
let g:syntastic_mode_map = { "mode": "passive", "active_filetypes": [], "passive_filetypes": [] }

" Matcher stuff

let g:path_to_matcher = "/usr/local/bin/matcher"
let g:ctrlp_user_command = ['.git/', 'cd %s && git ls-files . -co --exclude-standard']
let g:ctrlp_match_func = { 'match': 'GoodMatch' }

function! GoodMatch(items, str, limit, mmode, ispath, crfile, regex)
  " Create a cache file if not yet exists
  let cachefile = ctrlp#utils#cachedir().'/matcher.cache'
  if !( filereadable(cachefile) && a:items == readfile(cachefile) )
    call writefile(a:items, cachefile)
  endif
  if !filereadable(cachefile)
    return []
  endif

  " a:mmode is currently ignored. In the future, we should probably do
  " something about that. the matcher behaves like "full-line".
  let cmd = g:path_to_matcher.' --limit '.a:limit.' --manifest '.cachefile.' '
  if !( exists('g:ctrlp_dotfiles') && g:ctrlp_dotfiles )
    let cmd = cmd.'--no-dotfiles '
  endif
  let cmd = cmd.a:str

  return split(system(cmd), "\n")
endfunction

" Helper funcs for statusline

function! HighlightIdUnderCursor()
  let id = synIDattr(synID(line('.'), col('.'), 1), 'name')

  if len(id)
    return id
  endif

  return ''
endfunction

function! LimitPathLength(path, maxlength)
  if len(a:path) > a:maxlength
    return pathshorten(a:path)
  endif

  return a:path
endfunction

function! ShowUnlessDefault(text, default)
  if a:text == a:default
    return ''
  endif

  return text
endfunction

hi User1 ctermfg=1 ctermbg=none
hi User7 ctermfg=7 ctermbg=none
hi User8 ctermfg=8 ctermbg=none

set statusline=\ 

set statusline+=%{LimitPathLength(expand('%f'),50)}\ 
set statusline+=%7*
set statusline+=%(%h%m%r%w\ %)
set statusline+=(
set statusline+=%(%{&ft}%)
" set statusline+=%(,\ %{ShowUnlessDefault(len(&fenc)?&fenc:&enc,'utf-8')}%)
" set statusline+=%(,\ %{ShowUnlessDefault(&fileformat,'unix')}%)
set statusline+=)

set statusline+=%=
set statusline+=%8*

set statusline+=%(%l,%c%V%)\ 
set statusline+=%P\ 
set statusline+=%((%{HighlightIdUnderCursor()})%)
