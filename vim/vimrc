set nocompatible
filetype off

" === Plugins ===

call plug#begin('~/.vim/plugged')

" Fuzzy finder
Plug 'junegunn/fzf', { 'dir': '~/.fzf', 'do': './install --all' }
Plug 'junegunn/fzf.vim'

" Syntax parsing/highlighting/formatting
Plug 'tpope/vim-sleuth'
Plug 'sheerun/vim-polyglot'
Plug 'marijnh/tern_for_vim', { 'do': 'npm install' }
Plug 'kern/vim-es7'
Plug 'prettier/vim-prettier', {
  \ 'do': 'yarn install',
  \ 'for': ['javascript', 'css', 'scss', 'json', 'markdown'] }

" File/buffer navigation
Plug 'scrooloose/nerdtree'
Plug 'mkitt/tabline.vim'
Plug 'okcompute/vim-javascript-motions'

" Editing
Plug 'tpope/vim-commentary'
Plug 'tpope/vim-surround'
Plug 'AndrewRadev/splitjoin.vim'
Plug 'godlygeek/tabular'
Plug 'tpope/vim-characterize'

" Autocomplete
Plug 'Valloric/YouCompleteMe', { 'do': './install.py --tern-completer' }

call plug#end()

filetype on
filetype plugin on
filetype indent on

" === Configuration ===

syntax on
set background=dark
colorscheme water

" Set window split directions
set splitbelow
set splitright

" Show line numbers
set number
" Show relative line numbers on inactive lines
set relativenumber

" Capitalize some stuff
ca find Find
ca tab Tab

" Auto-indent new lines
set autoindent

" Backspace should delete over these special chars
set backspace=indent,eol,start

" Use spaces for indentation (2 per level)
set expandtab
" TAB key
set tabstop=2
" Tab commands (>>, <<, etc.)
set shiftwidth=2

" Don’t parse 0-led numbers as octal
set nrformats-=octal

" Always show statusline
set laststatus=2

" Command-line completion
set wildmenu

" Offset scroll position 5 lines from top/bottom
set scrolloff=5

" Ignore case in searches…
set ignorecase
" …unless capitals are used in the query.
set smartcase
" Search incrementally
set incsearch
" Highlight search terms
set hlsearch

" Highlight the line where the cursor is
set cursorline

" Enable mouse
set mouse=a

" Silence an annoying YouCompleteMe-related message (still necessary?)
set shortmess+=c

" Maintain a persistent undo file
set undofile

" Silence terminal bells
set visualbell
set noerrorbells visualbell t_vb=
autocmd GUIEnter * set visualbell t_vb=

let mapleader="\<Space>"

" Move within screen lines
nnoremap j gj
nnoremap k gk

" Use more up-to-date highlighting for js
let g:polyglot_disabled = ['javascript', 'javascript.jsx']

" === Shortcuts and commands ===

" Most-used shortcuts
nnoremap <Leader>o :Files<CR>
nnoremap <Leader>w :w<CR>
nnoremap <Leader>q :q<CR>
nnoremap <Leader>n :NERDTree<CR>
nnoremap <Leader>f :NERDTreeFind<CR>
nnoremap <Leader>r :source ~/.vimrc<CR>
nnoremap <Leader>e :e ~/.vimrc<CR>
nnoremap <Leader>c :noh<CR>
nnoremap <Leader>t :tabedit<CR>
nnoremap <Leader>g gt<CR>
nnoremap <Leader>s :Find<SPACE>
nnoremap <Leader>u :Prettier<CR>
nmap <Leader>sk :SplitjoinSplit<CR>
nmap <Leader>sj :SplitjoinJoin<CR>

" Clipboard management
vmap <Leader>y "+y
vmap <Leader>d "+d
nmap <Leader>p "+p
nmap <Leader>P "+P
vmap <Leader>p "+p
vmap <Leader>P "+P

" Split management
nnoremap <Leader>wv :vsplit<CR>
nnoremap <Leader>ws :split<CR>
nnoremap <Leader>we <C-W>=
nnoremap <C-J> <C-W><C-J>
nnoremap <C-K> <C-W><C-K>
nnoremap <C-L> <C-W><C-L>
nnoremap <C-H> <C-W><C-H>

" Home-row esc
imap jk <Esc>

" Fancy :Find command
command! -bang -nargs=* Find call fzf#vim#grep('rg --column --line-number --no-heading --fixed-strings --ignore-case --hidden --follow --glob "!.git/*" --color "always" '.shellescape(<q-args>).'| tr -d "\017"', 1, <bang>0)

" === Helper funcs ===

" Returns the id for syntax highlighting for the object under the cursor
function! HighlightIdUnderCursor()
  let id = synIDattr(synID(line('.'), col('.'), 1), 'name')

  if len(id)
    return id
  endif

  return ''
endfunction

" Shorten a `path` if it exceeds `maxLength`
function! LimitPathLength(path, maxlength)
  if len(a:path) > a:maxlength
    return pathshorten(a:path)
  endif

  return a:path
endfunction

" Returns `text` if it varies from `default`; otherwise returns an empty
" string
function! ShowUnlessDefault(text, default)
  if a:text == a:default
    return ''
  endif

  return text
endfunction

" === Statusline ===

hi User1 ctermfg=1 ctermbg=none
hi User7 ctermfg=7 ctermbg=none
hi User8 ctermfg=8 ctermbg=none

set statusline=\ 

set statusline+=%{LimitPathLength(expand('%f'),70)}\ 
set statusline+=%7*
set statusline+=%(%h%m%r%w\ %)
set statusline+=(
set statusline+=%(%{&ft}%)
set statusline+=%(,\ %{ShowUnlessDefault(len(&fenc)?&fenc:&enc,'utf-8')}%)
set statusline+=%(,\ %{ShowUnlessDefault(&fileformat,'unix')}%)
set statusline+=)

set statusline+=%=
set statusline+=%8*

set statusline+=%(%l,%c%V%)\ 
set statusline+=%P\ 
set statusline+=%((%{HighlightIdUnderCursor()})%)
